#
# Copyright (C) 2024 Intel Corporation
#
# Part of the Unified-Runtime Project, under the Apache License v2.0 with LLVM Exceptions.
# See LICENSE.TXT
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime Experimental APIs for (kernel) Launch Attributes"
ordinal: "99"
--- #--------------------------------------------------------------------------
type: macro
desc: "The extension string that defines support for the Launch Attributes extension, which is returned when querying device extensions."
name: $X_LAUNCH_ATTRIBUTES_EXTENSION_STRING_EXP
value: "\"$x_exp_launch_attributes\""
--- #--------------------------------------------------------------------------
type: enum
desc: "Specifies a launch attribute ID"
class: $xLaunchAttributes
name: $x_exp_launch_attribute_id_t
etors:
    - name: LAUNCH_ATTRIBUTE_CLUSTER_DIMENSION_EXP
      desc: "Three unsigned int values specifying the cluster dimensions."
      value: "0x2000"
--- #--------------------------------------------------------------------------
type: handle
desc: "Handle of launch attribute object"
class: $xLaunchAttributes
name: "$x_exp_launch_attribute_handle_t"
--- #--------------------------------------------------------------------------
type: function
desc: "Sets the launch attribute"
class: $xLaunchAttributes
name: SetLaunchAttributeExp
ordinal: "0"
analogue:
    - "none"
details:
    - "Sets the launch attribute."
params:
    - type: $x_exp_launch_attribute_handle_t*
      name: launchAttr
      desc: "[in][range(0, 1)] pointer to launch attribute handle address"
    - type: $x_exp_launch_attribute_id_t
      name: attrID
      desc: "[in] ID of launch attribute"
    - type: "size_t"
      name: attrSize
      desc: |
            [in] the number of bytes pointed to by pAttrValue.
    - type: "void*"
      name: pAttrValue
      desc: |
            [out][optional][typename(attrID, attrSize)] array of bytes holding the launch attribute data.
            If attrSize is not equal to or greater than the real number of bytes needed to return the
            attribute values then the $X_RESULT_ERROR_INVALID_SIZE error is returned and pAttrValue is not used.
returns:
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_UNSUPPORTED_ENUMERATION:
        - "If `attrID` is not supported by the adapter."
    - $X_RESULT_ERROR_INVALID_SIZE:
        - "`attrSize == 0 && pPropValue != NULL`"
        - "If `attrSize` is less than the real number of bytes needed to return the attribute values."
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "`attrSize != 0 && pAttrValue == NULL`"
        - "`pAttrValue == NULL`"
--- #--------------------------------------------------------------------------
type: function
desc: "Launch Kernel with custom Launch Attributes"
class: $xLaunchAttributes
name: EnqueueKernelLaunchCustomExp
ordinal: "0"
analogue:
    - "**cuLaunchKernelEx**"
details:
    - "Launches the kernel using the specified launch attributes"
    - "Consult the appropriate adapter driver documentation for details of adapter specific behavior and native error codes that may be returned."
params:
    - type: $x_queue_handle_t
      name: hQueue
      desc: "[in] handle of the queue object"
    - type: $x_kernel_handle_t
      name: hKernel
      desc: "[in] handle of the kernel object"
    - type: uint32_t
      name: workDim
      desc: "[in] number of dimensions, from 1 to 3, to specify the global and work-group work-items"
    - type: const size_t*
      name: pGlobalWorkSize
      desc: "[in] pointer to an array of workDim unsigned values that specify the number of global work-items in workDim that will execute the kernel function"
    - type: const size_t*
      name: pLocalWorkSize
      desc: "[in][optional] pointer to an array of workDim unsigned values that specify the number of local work-items forming a work-group that will execute the kernel function. If nullptr, the runtime implementation will choose the work-group size."
    - type: uint32_t
      name: numEventsInWaitList
      desc: "[in] size of the event wait list"
    - type: const ur_event_handle_t*
      name: phEventWaitList
      desc: "[in][optional][range(0, numEventsInWaitList)] pointer to a list of events that must be complete before the kernel execution. If nullptr, the numEventsInWaitList must be 0, indicating that no wait event. "
    - type: uint32_t
      name: numAttrsInLaunchAttrList
      desc: "[in] size of the launch attr list"
    - type: $x_exp_launch_attribute_handle_t*
      name: launchAttrList
      desc: "[in][range(0, numAttrsInLaunchAttrList)] pointer to a list of launch attributes"
    - type: ur_event_handle_t*
      name: phEvent
      desc: "[out][optional] return an event object that identifies this particular kernel execution instance."
returns:
    - $X_RESULT_SUCCESS
    - $X_RESULT_ERROR_UNINITIALIZED
    - $X_RESULT_ERROR_DEVICE_LOST
    - $X_RESULT_ERROR_ADAPTER_SPECIFIC
    - $X_RESULT_ERROR_INVALID_NULL_HANDLE:
        - "NULL == hQueue"
        - "NULL == hKernel"
    - $X_RESULT_ERROR_INVALID_NULL_POINTER:
        - "NULL == pGlobalWorkSize"
    - $X_RESULT_ERROR_INVALID_QUEUE
    - $X_RESULT_ERROR_INVALID_KERNEL
    - $X_RESULT_ERROR_INVALID_EVENT
    - $X_RESULT_ERROR_INVALID_EVENT_WAIT_LIST:
        - "phEventWaitList == NULL && numEventsInWaitList > 0"
        - "phEventWaitList != NULL && numEventsInWaitList == 0"
        - "If event objects in phEventWaitList are not valid events."
    - $X_RESULT_ERROR_IN_EVENT_LIST_EXEC_STATUS:
        - "An event in phEventWaitList has $X_EVENT_STATUS_ERROR"
    - $X_RESULT_ERROR_INVALID_WORK_DIMENSION
    - $X_RESULT_ERROR_INVALID_WORK_GROUP_SIZE
    - $X_RESULT_ERROR_INVALID_VALUE
    - $X_RESULT_ERROR_OUT_OF_HOST_MEMORY
    - $X_RESULT_ERROR_OUT_OF_RESOURCES
